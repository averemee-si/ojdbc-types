/**
 * Copyright (c) 2018-present, A2 Rešitve d.o.o.
 *
 * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in
 * compliance with the License. You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software distributed under the License is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See
 * the License for the specific language governing permissions and limitations under the License.
 */

plugins {
	id "java-library"
	id "org.owasp.dependencycheck" version "12.1.3"
	id "maven-publish"
    id "signing"
    id "org.jreleaser" version "1.20.0"
}

java {
	withSourcesJar()
	withJavadocJar()
	sourceCompatibility = JavaVersion.VERSION_11
	targetCompatibility = JavaVersion.VERSION_11
}

repositories {
	mavenCentral()
}

import java.nio.file.Paths

def readVersion() {
	def versionPropsFile = file(Paths.get("src","main","resources","ojdbc-types-version.properties"))
	if (versionPropsFile.canRead()) {
		Properties versionProps = new Properties()

		if (versionPropsFile.canRead()) {
			versionProps.load(new FileInputStream(versionPropsFile))
		}
		versionProps['version']
	} else {
		throw new GradleException("Could not read version.properties!")
	}
}

version = readVersion()
group = "solutions.a2.oracle"

repositories {
	mavenCentral()
}

dependencies {
	def oracleJdbcVersion = "23.7.0.25.01"
    // https://mvnrepository.com/artifact/com.oracle.database.jdbc/ojdbc8
    testImplementation("com.oracle.database.jdbc:ojdbc8:$oracleJdbcVersion")

	def jUnitVersion = "5.11.4"
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-api
    testImplementation("org.junit.jupiter:junit-jupiter-api:$jUnitVersion")
    // https://mvnrepository.com/artifact/org.junit.jupiter/junit-jupiter-engine
    testImplementation("org.junit.jupiter:junit-jupiter-engine:$jUnitVersion")
	testRuntimeOnly("org.junit.platform:junit-platform-launcher")
}


jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

test {
	useJUnitPlatform {
		excludeTags 'ignored'
	}
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            pom {
                name = "Oracle JDBC Types and some RDBMS internal structures parser"
                packaging = "jar"
                url = "https://github.com/averemee-si/ojdbc-types"
                description =
                    "Oracle JDBC Types converter to Java Types"
                organization {
                    name = "A2 Rešitve, d.o.o."
                    url = "https://a2-solutions.eu/"
                }
                scm {
                    url = "https://github.com/averemee-si/ojdbc-types"
                    connection = "scm:git:https://github.com/averemee-si/ojdbc-types.git"
                    developerConnection = "scm:git:git@github.com:averemee-si/ojdbc-types.git"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "https://a2-solutions.eu/licenses/apache/LICENSE.txt"
                    }
                }
                developers {
                    developer {
                        id = "averemee-si"
                        name = "Aleksei Veremeev"
                        email = "averemee@a2.solutions"
                        timezone = "Europe/Ljubljana"
                        organization = "A2 Rešitve, d.o.o."
                        organizationUrl = "https://a2-solutions.eu/"
                    }
                }
                inceptionYear = "2023"
            }
        }
    }

    repositories {
	    maven {
	        name = "LocalMavenWithChecksums"
            url = uri(layout.buildDirectory.dir("staging-deploy"))
	    }
    }
}


jreleaser {
    project {
        copyright = "Copyright (c) ${LocalDate.now().year} A2 Rešitve, d.o.o."
        description = "Oracle JDBC Types and some RDBMS internal structures parser"
    }
    signing {
        active = "ALWAYS"
        armored = true
        mode = "FILE"
        publicKey = ".gradle/public.key"
        secretKey = ".gradle/private.key"
    }
    deploy {
        maven {
             mavenCentral {
                 sonatype {
                     active = 'ALWAYS'
                     url = 'https://central.sonatype.com/api/v1/publisher'
                     stagingRepository('build/staging-deploy')
                 }
             }
        }
    }
    release {
        github {
            enabled = false
        }
    }
}
